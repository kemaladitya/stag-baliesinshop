{"version":3,"file":"components/general.js","sources":["webpack:///./components/general.js"],"sourcesContent":["\"use strict\"\n\n/* *\n * * get_list_products\n * * cart_detail\n * * manage_cart\n * * cart_manager\n */\n\nexport default {\n  list_month: [\n    \"\",\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  get_list_products: async (self, data) => {\n    try {\n      const request = await self.dispatch('request', {\n        url: '/api/products',\n        method: 'post',\n        data\n      });\n\n      request.data.results = request.data.results.map(_ => {\n        if (_.express_delivery && _.express_delivery_setup) {\n          _.express_delivery_setup = JSON.parse(_.express_delivery_setup);\n        }\n\n        return _;\n      })\n\n      if (request.data.status) {\n        self.dispatch('setState', {\n          payload: {\n            key: 'products',\n            data: request.data.results.sort((a, b) => b.priority - a.priority)\n          }\n        })\n\n        return true\n      }\n\n      return request.data\n    } catch (error) {\n      console.error(\"@get_list_products |\", error);\n\n      return error\n    }\n  },\n\n  cart_detail: async (self, data) => {\n    try {\n      const request = await self.dispatch('request', {\n        url: '/cache/cart',\n        method: 'post',\n        data\n      })\n      const cart =  request.data\n\n      if (cart && cart.status && cart.results) {\n        if (cart.results.type === 'single-order') {\n          if (cart.results.items.length) {\n            const list_cart = cart.results.items.map(el => {\n              const search_product = self.state.products.filter(\n                prod => prod.id === el.items[0].id\n              )\n\n              if (search_product.length) {\n                search_product[0].select_date = true\n                search_product[0].qty = el.items[0].qty\n\n                return search_product[0]\n              }\n            })\n            const cleaned_cart = list_cart.filter(el => typeof el == 'object')\n\n            self.dispatch('setState', {\n              payload: {\n                key: 'cart',\n                data: cleaned_cart\n              }\n            })\n          }\n\n          self.dispatch('setState', {\n            payload: {\n              key: 'notes',\n              data: cart.results.notes\n            }\n          })\n        }\n\n        if (cart.results.type === 'rp-order') {\n          if (cart.results.items.length) {\n            const list_dates = cart.results.items.map(el => {\n              const list_items = el.items.map(item => {\n                const search_product = self.state.products.filter(prod => {\n                  if (prod.id === item.id) {\n                    return prod\n                  }\n                })\n                const _item = {\n                  SKU: search_product[0].SKU,\n                  detail_id: search_product[0].detail[0].detail_id,\n                  discount_price: search_product[0].detail[0].discount_price,\n                  id: search_product[0].id,\n                  main_image: search_product[0].detail[0].main_image,\n                  name: search_product[0].name,\n                  normal_price: search_product[0].detail[0].normal_price,\n                  product_id: search_product[0].id,\n                  qty: item.qty,\n                  select_date: true,\n                  variant: search_product[0].detail[0].variant\n                }\n\n                return _item\n              })\n              \n                const merge_items = self.state.products.map(el => {\n                  const find_selected = list_items.filter(s_el => s_el.id == el.id)\n\n                  if (find_selected.length) return find_selected[0]\n\n                  const _item = {\n                    SKU: el.SKU,\n                    detail_id: el.detail[0].detail_id,\n                    discount_price: el.detail[0].discount_price,\n                    id: el.id,\n                    main_image: el.detail[0].main_image,\n                    name: el.name,\n                    normal_price: el.detail[0].normal_price,\n                    product_id: el.id,\n                    qty: 0,\n                    select_date: false,\n                    variant: el.detail[0].variant\n                  }\n\n                  return _item\n                })\n\n                return {\n                  date: el.delivery_date,\n                  delivery_time: el.delivery_time,\n                  items: merge_items\n                }\n            })\n\n            self.dispatch('setState', {\n              payload: {\n                key: 'dates',\n                data: list_dates\n              }\n            })\n\n            self.dispatch('setState', {\n              payload: {\n                key: 'rp_order',\n                data: true\n              }\n            })\n          }\n\n          self.dispatch('setState', {\n            payload: {\n              key: 'notes',\n              data: cart.results.notes\n            }\n          })\n        }\n      }\n\n      return request.data\n    } catch (error) {\n      console.error(\"@cart_detail |\", error);\n    }\n  },\n\n  manage_cart: async (self, data) => {\n    try {\n      const request = await self.dispatch('request', {\n        url: '/cache/manage/cart',\n        method: 'post',\n        data\n      })\n\n      if ('status' in request) {\n        return request\n      } else {\n        return {\n          status : 404,\n          data   : { status: false }\n        }\n      }\n    } catch (error) {\n      console.error(\"@manage_cart |\", error);\n    }\n  },\n\n  cart_manager: async (self, data) => {\n    try {\n      const request = await self.$store.dispatch(\"request\", {\n        url: \"/cart\",\n        method: \"post\",\n        data,\n      });\n\n      if (request.status === 200 && request.data) {\n        self.$store.dispatch(\"setState\", {\n          payload: {\n            key: \"order_type\",\n            data: request.data.type || \"single-order\",\n          },\n        });\n\n        const order_type = self.$store.state.order_type;\n\n        if (order_type === \"single-order\") {\n          self.$store.dispatch(\"setState\", {\n            payload: {\n              key: \"cart\",\n              data: request.data.items,\n            },\n          });\n        } else if (order_type === \"subscription-order\") {\n          self.$store.dispatch(\"setState\", {\n            payload: {\n              key: \"subscription_cart\",\n              data: request.data.items,\n            },\n          });\n        } else if (order_type === \"package-order\") {\n          self.$store.dispatch(\"setState\", {\n            payload: {\n              key: \"package_cart\",\n              data: request.data.items,\n            },\n          });\n        }\n\n        return request.data;\n      }\n    } catch (error) {\n      console.error(\"@cart_manager |\", error);\n\n      return null;\n    }\n  },\n}\n"],"mappings":";;;;;;;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAxPA;;;;A","sourceRoot":""}